# ü§ñ Bot de Rod√≠zio do Lixo (WhatsApp Automation)

Este √© um projeto de automa√ß√£o desenvolvido em Python (Flask) para gerenciar o rod√≠zio de tarefas dom√©sticas ou de escrit√≥rio, especificamente a tarefa de "levar o lixo". O bot √© ativado por comandos via WhatsApp e mant√©m um registro de quem √© o pr√≥ximo na fila, garantindo que o revezamento seja justo e autom√°tico.

---

## üí° Habilidades e Tecnologias Demonstradas

Este projeto destaca profici√™ncia nas seguintes √°reas:

* **Desenvolvimento Backend:** Python e framework **Flask** para criar um servidor web leve e eficiente.
* **Integra√ß√£o de API:** Uso da **API Whapi.cloud** para enviar e receber mensagens do WhatsApp atrav√©s de Webhooks.
* **Controle de Estado:** Implementa√ß√£o de persist√™ncia de dados utilizando o arquivo **`data.json`** para salvar o estado atual do rod√≠zio, garantindo que as informa√ß√µes n√£o se percam ao reiniciar o servidor.
* **Ambiente de Desenvolvimento:** Configura√ß√£o e gerenciamento de ambientes virtuais (**`venv`**) e exposi√ß√£o de servi√ßos locais para a internet (**Ngrok**).
* **Seguran√ßa:** Uso de vari√°veis de ambiente (**`.env`**) para proteger tokens de API e credenciais sens√≠veis.
* **L√≥gica de Neg√≥cio:** Implementa√ß√£o de l√≥gica de rod√≠zio circular (`%` operador m√≥dulo) e restri√ß√£o de uso a um **grupo de WhatsApp espec√≠fico** (`TARGET_GROUP_ID`).

---

## ‚öôÔ∏è Como Funciona

O fluxo da automa√ß√£o √© o seguinte:

1.  Um usu√°rio (em um grupo restrito) envia o comando `LEVEI` ou `LIXO`.
2.  O **Whapi.cloud** envia o evento de mensagem como um Webhook POST para a URL p√∫blica do **Ngrok**.
3.  O **Ngrok** encaminha o Webhook para o servidor **Flask** (`app.py`) rodando localmente.
4.  O `app.py` verifica o `chat_id`. Se for o grupo correto, ele processa o comando.
    * **Comando `LIXO`:** L√™ `data.json` e informa quem √© o pr√≥ximo.
    * **Comando `LEVEI`:** Atualiza o √≠ndice no `data.json` e envia uma mensagem de confirma√ß√£o, j√° indicando o pr√≥ximo da fila.
5.  O servidor Flask usa a **API Whapi.cloud** novamente para enviar a mensagem de resposta de volta ao grupo.

---

## üõ†Ô∏è Configura√ß√£o e Instala√ß√£o

Para replicar este projeto, siga os seguintes passos:

1.  **Clone o Reposit√≥rio:**
    ```bash
    git clone [SEU_LINK_DO_REPOSITORIO]
    cd nome_do_projeto
    ```
2.  **Crie e Ative o Ambiente Virtual:**
    ```bash
    python -m venv venv
    source venv/bin/activate # ou venv\Scripts\activate no Windows
    ```
3.  **Instale as Depend√™ncias:**
    ```bash
    pip install -r requirements.txt
    ```
4.  **Crie o Arquivo `.env`:** Crie um arquivo chamado `.env` e preencha com suas credenciais e configura√ß√µes (substitua os placeholders):

    ```ini
    # .env
    WHAPI_TOKEN="SEU_TOKEN_DO_WHAPI"
    WHAPI_URL_BASE="[https://gate.whapi.cloud/v1](https://gate.whapi.cloud/v1)" 
    PORT=5000 
    PARTICIPANTS="Nome1,Nome2,Nome3" 
    TARGET_GROUP_ID="ID_DO_GRUPO_EXCLUSIVO@g.us"
    ```
5.  **Inicialize o Estado:** Certifique-se de que o `data.json` cont√©m: `{"last_person_index": -1}`.

---